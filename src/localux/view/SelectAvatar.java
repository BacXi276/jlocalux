package localux.view;

import localux.DAO.photoDAO;
import java.io.File;
import static java.lang.Integer.parseInt;
import java.awt.Rectangle;
import java.awt.Point;
import java.awt.Dimension;
import java.awt.Insets;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import javax.swing.filechooser.FileNameExtensionFilter;
import localux.model.Photo;

public class SelectAvatar extends javax.swing.JDialog {

    // taille maximum d'affichage des images
    private final int maxFileSize = 6000000;
    private final String pseudo;
    private boolean selected;
    private boolean cropped;
    private Photo photo;
    private Point dO;

    /**
     * Creates new form NewJDialog
     */
    public SelectAvatar(java.awt.Frame parent, boolean modal, String pseudo) {
        super(parent, modal);
        this.selected = false;
        this.cropped = false;
        this.pseudo = pseudo;
        initComponents();
        uiDec.requestFocus();
        dO = new Point(0, 0);
        photo = new Photo();
        photoDAO.getUtIcon(pseudo, photo);

        this.imageOut.setIcon(photo.getMiniatureIcon());
        this.imageIn.setIcon(photo.getImageIcon());
        // initialisation de la zone de découpe
        selectedZone.setVisible(false);
        Insets iZ = selectedZone.getBorder().getBorderInsets(selectedZone);
        Rectangle rO = imageOut.getBounds();
        Point lI = imageIn.getLocation();
        Insets iO = imageOut.getBorder().getBorderInsets(imageOut);
        Insets iI = imageIn.getBorder().getBorderInsets(imageIn);
        selectedZone.setBounds(
                Math.round(lI.x + iI.left - iZ.left + (rO.width - iO.left - iO.right) / 2),
                Math.round(lI.y + iI.top - iZ.top + (rO.height - iO.top - iO.bottom) / 2),
                Math.round((rO.width - iO.left - iO.right) * 2) + iZ.left + iZ.right,
                Math.round((rO.height - iO.bottom - iO.top) * 2) + iZ.bottom + iZ.top);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagChooser = new javax.swing.JFileChooser();
        choisir = new javax.swing.JButton();
        valider = new javax.swing.JButton();
        abandonner = new javax.swing.JButton();
        decouper = new javax.swing.JButton();
        jLabLum = new javax.swing.JLabel();
        luminosite = new javax.swing.JSlider();
        uiLum = new javax.swing.JTextField();
        jLabCon = new javax.swing.JLabel();
        contraste = new javax.swing.JSlider();
        uiCon = new javax.swing.JTextField();
        appliquer = new javax.swing.JButton();
        jLabDecoupe = new javax.swing.JLabel();
        taille = new javax.swing.JSlider();
        imageOut = new javax.swing.JLabel();
        selectedZone = new javax.swing.JPanel();
        imageIn = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        pivoterGauche = new javax.swing.JButton();
        pivoterDroit = new javax.swing.JButton();
        mirroirVertical = new javax.swing.JButton();
        mirroirHorizontal = new javax.swing.JButton();
        Aider = new javax.swing.JButton();
        uiDec = new javax.swing.JTextField();
        jLabFond = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("view.SelectAvatar");
        setMinimumSize(new java.awt.Dimension(720, 670));
        setModal(true);
        setResizable(false);
        setSize(new java.awt.Dimension(720, 670));
        getContentPane().setLayout(null);

        choisir.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        choisir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/folder-open_20.png"))); // NOI18N
        choisir.setText("Choisir");
        choisir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choisirMouseClicked(evt);
            }
        });
        getContentPane().add(choisir);
        choisir.setBounds(10, 590, 120, 30);

        valider.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        valider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/valid_20.png"))); // NOI18N
        valider.setText("Valider");
        valider.setToolTipText("Enregister votre selection");
        valider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                validerMouseClicked(evt);
            }
        });
        getContentPane().add(valider);
        valider.setBounds(430, 590, 110, 30);
        valider.getAccessibleContext().setAccessibleDescription("Selectionner une ville");

        abandonner.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        abandonner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/escape_20.png"))); // NOI18N
        abandonner.setText("Abandonner");
        abandonner.setToolTipText("Quitter la fenêtre sans sauvegarder.");
        abandonner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abandonnerMouseClicked(evt);
            }
        });
        getContentPane().add(abandonner);
        abandonner.setBounds(560, 590, 132, 30);

        decouper.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        decouper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/expand.png"))); // NOI18N
        decouper.setText("Découper");
        decouper.setToolTipText("Sélectionner une partie de l'image");
        decouper.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decouperMouseClicked(evt);
            }
        });
        getContentPane().add(decouper);
        decouper.setBounds(530, 430, 115, 30);

        jLabLum.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabLum.setText("Luminosité :");
        getContentPane().add(jLabLum);
        jLabLum.setBounds(500, 200, 80, 17);

        luminosite.setMinimum(-100);
        luminosite.setToolTipText("");
        luminosite.setValue(0);
        luminosite.setMaximumSize(new java.awt.Dimension(200, 16));
        luminosite.setMinimumSize(new java.awt.Dimension(200, 16));
        luminosite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                luminositeMouseReleased(evt);
            }
        });
        getContentPane().add(luminosite);
        luminosite.setBounds(500, 220, 200, 16);

        uiLum.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        uiLum.setText("0");
        uiLum.setMaximumSize(new java.awt.Dimension(42, 22));
        uiLum.setMinimumSize(new java.awt.Dimension(42, 22));
        uiLum.setPreferredSize(new java.awt.Dimension(42, 22));
        uiLum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uiLumFocusLost(evt);
            }
        });
        getContentPane().add(uiLum);
        uiLum.setBounds(580, 198, 42, 22);

        jLabCon.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabCon.setText("Contraste :");
        getContentPane().add(jLabCon);
        jLabCon.setBounds(500, 240, 70, 17);

        contraste.setMinimum(-100);
        contraste.setValue(0);
        contraste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                contrasteMouseReleased(evt);
            }
        });
        getContentPane().add(contraste);
        contraste.setBounds(500, 260, 200, 16);

        uiCon.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        uiCon.setText("0");
        uiCon.setMaximumSize(new java.awt.Dimension(42, 22));
        uiCon.setMinimumSize(new java.awt.Dimension(42, 22));
        uiCon.setPreferredSize(new java.awt.Dimension(42, 22));
        uiCon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uiConFocusLost(evt);
            }
        });
        getContentPane().add(uiCon);
        uiCon.setBounds(580, 238, 42, 22);

        appliquer.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        appliquer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/eye_20.png"))); // NOI18N
        appliquer.setText("Appliquer");
        appliquer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appliquerMouseClicked(evt);
            }
        });
        getContentPane().add(appliquer);
        appliquer.setBounds(530, 280, 121, 30);

        jLabDecoupe.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabDecoupe.setText("Taille de la découpe :");
        getContentPane().add(jLabDecoupe);
        jLabDecoupe.setBounds(500, 470, 117, 17);

        taille.setMaximum(300);
        taille.setMinimum(100);
        taille.setValue(200);
        taille.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tailleMouseReleased(evt);
            }
        });
        getContentPane().add(taille);
        taille.setBounds(500, 490, 200, 16);

        imageOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/user-tie-min.png"))); // NOI18N
        imageOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(imageOut);
        imageOut.setBounds(520, 20, 142, 167);

        selectedZone.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new java.awt.Color(204, 204, 204)));
        selectedZone.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        selectedZone.setMaximumSize(new java.awt.Dimension(436, 511));
        selectedZone.setMinimumSize(new java.awt.Dimension(436, 511));
        selectedZone.setOpaque(false);
        selectedZone.setPreferredSize(new java.awt.Dimension(436, 511));
        selectedZone.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                selectedZoneMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                selectedZoneMouseMoved(evt);
            }
        });
        getContentPane().add(selectedZone);
        selectedZone.setBounds(34, 14, 436, 511);

        imageIn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/user-tie-max.png"))); // NOI18N
        imageIn.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), null));
        getContentPane().add(imageIn);
        imageIn.setBounds(40, 20, 424, 499);

        message.setText("jLabel2");
        getContentPane().add(message);
        message.setBounds(40, 550, 650, 16);

        pivoterGauche.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        pivoterGauche.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/share-left.png"))); // NOI18N
        pivoterGauche.setText("-90°");
        pivoterGauche.setIconTextGap(2);
        pivoterGauche.setMargin(new java.awt.Insets(2, 0, 2, 1));
        pivoterGauche.setPreferredSize(new java.awt.Dimension(84, 30));
        pivoterGauche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pivoterGaucheMouseClicked(evt);
            }
        });
        getContentPane().add(pivoterGauche);
        pivoterGauche.setBounds(510, 330, 84, 30);

        pivoterDroit.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        pivoterDroit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/share-right.png"))); // NOI18N
        pivoterDroit.setText("+90°");
        pivoterDroit.setIconTextGap(2);
        pivoterDroit.setMargin(new java.awt.Insets(2, 0, 2, 1));
        pivoterDroit.setPreferredSize(new java.awt.Dimension(84, 30));
        pivoterDroit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pivoterDroitMouseClicked(evt);
            }
        });
        getContentPane().add(pivoterDroit);
        pivoterDroit.setBounds(600, 330, 84, 30);

        mirroirVertical.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        mirroirVertical.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/sync-alt_v.png"))); // NOI18N
        mirroirVertical.setText("Haut.");
        mirroirVertical.setMargin(new java.awt.Insets(2, 1, 2, 1));
        mirroirVertical.setPreferredSize(new java.awt.Dimension(84, 30));
        mirroirVertical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mirroirVerticalMouseClicked(evt);
            }
        });
        getContentPane().add(mirroirVertical);
        mirroirVertical.setBounds(510, 370, 84, 30);

        mirroirHorizontal.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        mirroirHorizontal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/sync-alt.png"))); // NOI18N
        mirroirHorizontal.setText("Larg.");
        mirroirHorizontal.setActionCommand("Larg");
        mirroirHorizontal.setMargin(new java.awt.Insets(2, 1, 2, 1));
        mirroirHorizontal.setPreferredSize(new java.awt.Dimension(84, 30));
        mirroirHorizontal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mirroirHorizontalMouseClicked(evt);
            }
        });
        getContentPane().add(mirroirHorizontal);
        mirroirHorizontal.setBounds(600, 370, 84, 30);
        mirroirHorizontal.getAccessibleContext().setAccessibleName("Larg");

        Aider.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Aider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/question-circle_20.png"))); // NOI18N
        Aider.setText("Aide");
        getContentPane().add(Aider);
        Aider.setBounds(320, 590, 90, 30);

        uiDec.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        uiDec.setText("200");
        uiDec.setMaximumSize(new java.awt.Dimension(42, 22));
        uiDec.setMinimumSize(new java.awt.Dimension(42, 22));
        uiDec.setPreferredSize(new java.awt.Dimension(42, 22));
        uiDec.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uiDecFocusLost(evt);
            }
        });
        getContentPane().add(uiDec);
        uiDec.setBounds(640, 465, 42, 22);

        jLabFond.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/fec_dark.jpg"))); // NOI18N
        jLabFond.setPreferredSize(new java.awt.Dimension(720, 630));
        jLabFond.setRequestFocusEnabled(false);
        getContentPane().add(jLabFond);
        jLabFond.setBounds(-3, 1, 720, 660);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void validerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validerMouseClicked

        //photo.setMiniature((ImageIcon) this.imageOut.getIcon());
        photoDAO.setUtImage(pseudo, photo);
        this.selected = true;
        this.dispose();
    }//GEN-LAST:event_validerMouseClicked

    private void decouperMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decouperMouseClicked
        if (selectedZone.isVisible()) {
            cropped = false;
            selectedZone.setVisible(false);
        } else {
            cropped = true;
            ajusterDecoupe();
            selectedZone.setVisible(true);
        }
        afficherMiniature();

    }//GEN-LAST:event_decouperMouseClicked

    private void choisirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choisirMouseClicked
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "png", "jpg", "jpeg", "gif");
        imagChooser.setCurrentDirectory(FileSystemView.getFileSystemView().getHomeDirectory());
        imagChooser.setFileFilter(filter);
        int returnValue = imagChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedImg = imagChooser.getSelectedFile();
            if (selectedImg.length() < maxFileSize) {
                photo = new Photo(selectedImg.toPath());
                if (!photo.isNull()) {
                    this.imageIn.setIcon(photo.getImageIcon());
                    this.imageOut.setIcon(photo.getMiniatureIcon());
                }
            }

        }

    }//GEN-LAST:event_choisirMouseClicked

    private void abandonnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abandonnerMouseClicked
        this.selected = false;
        this.dispose();
    }//GEN-LAST:event_abandonnerMouseClicked

    private void luminositeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_luminositeMouseReleased
        uiLum.setText("" + luminosite.getValue());
        this.photo.setLumi(luminosite.getValue());
    }//GEN-LAST:event_luminositeMouseReleased

    private void contrasteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contrasteMouseReleased
        uiCon.setText("" + contraste.getValue());
        this.photo.setCont(contraste.getValue());
    }//GEN-LAST:event_contrasteMouseReleased

    private void uiLumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uiLumFocusLost
        int lum = parseInt(uiLum.getText().strip());
        if (lum > -100 && lum < 100) {
            luminosite.setValue(parseInt(uiLum.getText().strip()));
            this.photo.setLumi(luminosite.getValue());
        } else {
            uiLum.setText("" + luminosite.getValue());
        }

    }//GEN-LAST:event_uiLumFocusLost

    private void uiConFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uiConFocusLost
        int con = parseInt(uiCon.getText().strip());
        if (con > -100 && con < 100) {
            contraste.setValue(parseInt(uiCon.getText().strip()));
            this.photo.setCont(contraste.getValue());
        } else {
            uiCon.setText("" + contraste.getValue());
        }
    }//GEN-LAST:event_uiConFocusLost

    private void uiDecFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uiDecFocusLost
        taille.setValue(parseInt(uiDec.getText().strip()));
        ajusterDecoupe();
    }//GEN-LAST:event_uiDecFocusLost

    private void tailleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tailleMouseReleased
        uiDec.setText("" + taille.getValue());
        ajusterDecoupe();
    }//GEN-LAST:event_tailleMouseReleased

    private void selectedZoneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedZoneMouseDragged
        Point dZ = selectedZone.getLocation();
        Point dD = evt.getPoint();
        Point dN = new Point(dZ.x + dD.x - dO.x, dZ.y + dD.y - dO.y);
        Insets iZ = selectedZone.getBorder().getBorderInsets(selectedZone);
        Insets iI = imageIn.getBorder().getBorderInsets(imageIn);
        // dépassement x,y
        if ((dN.x + iZ.left) < (imageIn.getX() + iI.left)) {
            dN.x = imageIn.getX() + iI.left - iZ.left;
        }
        if ((dN.y + iZ.top) < (imageIn.getY() + iI.top)) {
            dN.y = imageIn.getY() + iI.top - iZ.top;
        }
        // dépassement x+largeur,y+hauteur
        Dimension sZ = selectedZone.getSize();
        if ((dN.x + sZ.width - iZ.right) > (imageIn.getX() + imageIn.getWidth() - iI.right)) {
            dN.x -= (dN.x + sZ.width - iZ.right) - (imageIn.getX() + imageIn.getWidth() - iI.right);
        }
        if ((dN.y + sZ.height - iZ.bottom) > (imageIn.getY() + imageIn.getHeight() - iI.bottom)) {
            dN.y -= (dN.y + sZ.height - iZ.bottom) - (imageIn.getY() + imageIn.getHeight() - iI.bottom);
        }
        selectedZone.setLocation(dN);
        afficherMiniature();
    }//GEN-LAST:event_selectedZoneMouseDragged

    private void selectedZoneMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedZoneMouseMoved
        dO = evt.getPoint();
    }//GEN-LAST:event_selectedZoneMouseMoved

    private void mirroirVerticalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mirroirVerticalMouseClicked
        photo.flip(1, -1);
        this.imageOut.setIcon(photo.getMiniatureIcon());
        this.imageIn.setIcon(photo.getImageIcon());
    }//GEN-LAST:event_mirroirVerticalMouseClicked

    private void mirroirHorizontalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mirroirHorizontalMouseClicked
        photo.flip(-1, 1);
        this.imageOut.setIcon(photo.getMiniatureIcon());
        this.imageIn.setIcon(photo.getImageIcon());
    }//GEN-LAST:event_mirroirHorizontalMouseClicked

    private void pivoterDroitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pivoterDroitMouseClicked
        photo.rotate(90);
        this.imageOut.setIcon(photo.getMiniatureIcon());
        this.imageIn.setIcon(photo.getImageIcon());
    }//GEN-LAST:event_pivoterDroitMouseClicked

    private void pivoterGaucheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pivoterGaucheMouseClicked
        photo.rotate(-90);
        this.imageOut.setIcon(photo.getMiniatureIcon());
        this.imageIn.setIcon(photo.getImageIcon());
    }//GEN-LAST:event_pivoterGaucheMouseClicked

    private void appliquerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appliquerMouseClicked
        this.imageOut.setIcon(photo.rescaleMin(luminosite.getValue(), contraste.getValue()));
    }//GEN-LAST:event_appliquerMouseClicked

    public boolean isSelected() {
        return selected;
    }

    public void ajusterDecoupe() {
        if (cropped) {
            float coef = (float) taille.getValue() / 100.0f;

            Rectangle rZ = selectedZone.getBounds();
            Insets iZ = selectedZone.getBorder().getBorderInsets(selectedZone);
            Rectangle rO = imageOut.getBounds();
            Insets iO = imageOut.getBorder().getBorderInsets(imageOut);
            Insets iI = imageIn.getBorder().getBorderInsets(imageIn);
            float dC = (coef - ((float) (rZ.height - iZ.bottom - iZ.top) / (float) (rO.height - iO.bottom - iO.top)));

            rZ.x -= Math.round(((rO.width - iO.left - iO.right) * dC) / 2.0f);
            rZ.y -= Math.round(((rO.height - iO.top - iO.bottom) * dC) / 2.0f);
            rZ.width = Math.round((rO.width - iO.left - iO.right) * coef) + iZ.left + iZ.right;
            rZ.height = Math.round((rO.height - iO.bottom - iO.top) * coef) + iZ.bottom + iZ.top;
            selectedZone.setBounds(rZ);

            Point dZ = selectedZone.getLocation();
            // dépassement x,y
            if ((dZ.x + iZ.left) < (imageIn.getX() + iI.left)) {
                dZ.x = imageIn.getX() + iI.left - iZ.left;
            }
            if ((dZ.y + iZ.top) < (imageIn.getY() + iI.top)) {
                dZ.y = imageIn.getY() + iI.top - iZ.top;
            }
            // dépassement x+largeur,y+hauteur
            Dimension sZ = selectedZone.getSize();
            Dimension sI = imageIn.getSize();
            if ((dZ.x + sZ.width - iZ.right) > (imageIn.getX() + imageIn.getWidth() - iI.right)) {
                dZ.x -= (dZ.x + sZ.width - iZ.right) - (imageIn.getX() + imageIn.getWidth() - iI.right);
            }
            if ((dZ.y + sZ.height - iZ.bottom) > (imageIn.getY() + imageIn.getHeight() - iI.bottom)) {
                dZ.y -= (dZ.y + sZ.height - iZ.bottom) - (imageIn.getY() + imageIn.getHeight() - iI.bottom);
            }
            selectedZone.setLocation(dZ);
        }
        afficherMiniature();
    }

    public void afficherMiniature() {
        Rectangle rZ = new Rectangle(0, 0, 420, 495);
        Insets iI = imageIn.getBorder().getBorderInsets(imageIn);
        Insets iZ = new Insets(0, 0, 0, 0);

        if (cropped) {
            rZ = selectedZone.getBounds();
            iZ = selectedZone.getBorder().getBorderInsets(selectedZone);

        } else {
            rZ = imageIn.getBounds();
            iZ = imageIn.getBorder().getBorderInsets(imageIn);
        }
        rZ.x += iZ.left - imageIn.getX() - iI.left;;
        rZ.y += iZ.top - imageIn.getY() - iI.bottom;;
        rZ.width -= (iZ.left + iZ.right);
        rZ.height -= (iZ.top + iZ.bottom);

        imageOut.setIcon(photo.getMiniatureIconFromImage(rZ));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aider;
    private javax.swing.JButton abandonner;
    private javax.swing.JButton appliquer;
    private javax.swing.JButton choisir;
    private javax.swing.JSlider contraste;
    private javax.swing.JButton decouper;
    private javax.swing.JFileChooser imagChooser;
    private javax.swing.JLabel imageIn;
    private javax.swing.JLabel imageOut;
    private javax.swing.JLabel jLabCon;
    private javax.swing.JLabel jLabDecoupe;
    private javax.swing.JLabel jLabFond;
    private javax.swing.JLabel jLabLum;
    private javax.swing.JSlider luminosite;
    private javax.swing.JLabel message;
    private javax.swing.JButton mirroirHorizontal;
    private javax.swing.JButton mirroirVertical;
    private javax.swing.JButton pivoterDroit;
    private javax.swing.JButton pivoterGauche;
    private javax.swing.JPanel selectedZone;
    private javax.swing.JSlider taille;
    private javax.swing.JTextField uiCon;
    private javax.swing.JTextField uiDec;
    private javax.swing.JTextField uiLum;
    private javax.swing.JButton valider;
    // End of variables declaration//GEN-END:variables
}
